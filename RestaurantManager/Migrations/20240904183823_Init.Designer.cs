// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RestaurantManager.Data;

#nullable disable

namespace RestaurantManager.Migrations
{
    [DbContext(typeof(RestaurantManagerContext))]
    [Migration("20240904183823_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("RestaurantManager.Models.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FK_RestaurantId")
                        .HasColumnType("int");

                    b.Property<int>("FK_TableId")
                        .HasColumnType("int");

                    b.Property<int>("FK_TimeslotId")
                        .HasColumnType("int");

                    b.Property<int>("FK_UserID")
                        .HasColumnType("int");

                    b.Property<int>("NrOfPeople")
                        .HasColumnType("int");

                    b.Property<string>("Requests")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("requestedEndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("requestedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FK_RestaurantId");

                    b.HasIndex("FK_TableId");

                    b.HasIndex("FK_TimeslotId");

                    b.HasIndex("FK_UserID");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("RestaurantManager.Models.Menu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FK_RestaurantId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FK_RestaurantId");

                    b.ToTable("Menus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FK_RestaurantId = 1,
                            Name = "Meny"
                        },
                        new
                        {
                            Id = 2,
                            FK_RestaurantId = 1,
                            Name = "Lunchmeny"
                        },
                        new
                        {
                            Id = 3,
                            FK_RestaurantId = 2,
                            Name = "Meny"
                        },
                        new
                        {
                            Id = 4,
                            FK_RestaurantId = 2,
                            Name = "Helgmeny"
                        });
                });

            modelBuilder.Entity("RestaurantManager.Models.MenuItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AmountAvaliable")
                        .HasColumnType("int");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FK_MenuId")
                        .HasColumnType("int");

                    b.Property<int>("FK_RestaurantId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<bool>("isAvaliable")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("FK_MenuId");

                    b.HasIndex("OrderId");

                    b.ToTable("MenuItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AmountAvaliable = 100,
                            Category = "Pizza",
                            Description = "En sorts pizza.",
                            FK_MenuId = 1,
                            FK_RestaurantId = 0,
                            Name = "Ananaspizza",
                            isAvaliable = true
                        },
                        new
                        {
                            Id = 2,
                            AmountAvaliable = 100,
                            Category = "Pizza",
                            Description = "En annan pizza.",
                            FK_MenuId = 1,
                            FK_RestaurantId = 0,
                            Name = "Bananpizza",
                            isAvaliable = true
                        },
                        new
                        {
                            Id = 3,
                            AmountAvaliable = 100,
                            Category = "Pizza",
                            Description = "Också pizza.",
                            FK_MenuId = 1,
                            FK_RestaurantId = 0,
                            Name = "Bönpizza",
                            isAvaliable = true
                        },
                        new
                        {
                            Id = 4,
                            AmountAvaliable = 100,
                            Category = "Pizza",
                            Description = "En Rund pizza.",
                            FK_MenuId = 1,
                            FK_RestaurantId = 0,
                            Name = "Pastapizza",
                            isAvaliable = true
                        },
                        new
                        {
                            Id = 5,
                            AmountAvaliable = 100,
                            Category = "Dryck",
                            Description = "Lärre.",
                            FK_MenuId = 1,
                            FK_RestaurantId = 0,
                            Name = "Cuba cola",
                            isAvaliable = true
                        },
                        new
                        {
                            Id = 6,
                            AmountAvaliable = 100,
                            Category = "Pasta",
                            Description = "Pasta med pålägg",
                            FK_MenuId = 2,
                            FK_RestaurantId = 0,
                            Name = "Pastasallad med banan",
                            isAvaliable = true
                        },
                        new
                        {
                            Id = 7,
                            AmountAvaliable = 100,
                            Category = "Pasta",
                            Description = "Pasta med annat pålägg",
                            FK_MenuId = 2,
                            FK_RestaurantId = 0,
                            Name = "Pastasallad med mint",
                            isAvaliable = true
                        },
                        new
                        {
                            Id = 8,
                            AmountAvaliable = 100,
                            Category = "Pasta",
                            Description = "Pasta med oätligt pålägg",
                            FK_MenuId = 2,
                            FK_RestaurantId = 0,
                            Name = "Pastasallad med lakrits",
                            isAvaliable = true
                        },
                        new
                        {
                            Id = 9,
                            AmountAvaliable = 100,
                            Category = "Pizza",
                            Description = "Pizza med champinjoner",
                            FK_MenuId = 2,
                            FK_RestaurantId = 0,
                            Name = "Capritjosan",
                            isAvaliable = true
                        },
                        new
                        {
                            Id = 10,
                            AmountAvaliable = 100,
                            Category = "Pizza",
                            Description = "Pizza utan champinjoner",
                            FK_MenuId = 2,
                            FK_RestaurantId = 0,
                            Name = "Margareta",
                            isAvaliable = true
                        },
                        new
                        {
                            Id = 11,
                            AmountAvaliable = 100,
                            Category = "Bakelser",
                            Description = "Snurrigt bakverk",
                            FK_MenuId = 3,
                            FK_RestaurantId = 0,
                            Name = "Bulle",
                            isAvaliable = true
                        },
                        new
                        {
                            Id = 12,
                            AmountAvaliable = 100,
                            Category = "Bakelser",
                            Description = "Fyrkantigt bakverk",
                            FK_MenuId = 3,
                            FK_RestaurantId = 0,
                            Name = "Kärleksrutor",
                            isAvaliable = true
                        },
                        new
                        {
                            Id = 13,
                            AmountAvaliable = 100,
                            Category = "Bakelser",
                            Description = "Sfäriskt bakverk",
                            FK_MenuId = 3,
                            FK_RestaurantId = 0,
                            Name = "Chokladboll",
                            isAvaliable = true
                        },
                        new
                        {
                            Id = 14,
                            AmountAvaliable = 100,
                            Category = "Dryck",
                            Description = "Brun dryck",
                            FK_MenuId = 3,
                            FK_RestaurantId = 0,
                            Name = "Kaffe",
                            isAvaliable = true
                        },
                        new
                        {
                            Id = 15,
                            AmountAvaliable = 100,
                            Category = "Dryck",
                            Description = "Halvgenomskinlig dryck",
                            FK_MenuId = 3,
                            FK_RestaurantId = 0,
                            Name = "Té",
                            isAvaliable = true
                        },
                        new
                        {
                            Id = 16,
                            AmountAvaliable = 100,
                            Category = "Bakelser",
                            Description = "Snurrigt bakverk",
                            FK_MenuId = 4,
                            FK_RestaurantId = 0,
                            Name = "Bulle",
                            isAvaliable = true
                        },
                        new
                        {
                            Id = 17,
                            AmountAvaliable = 100,
                            Category = "Bakelser",
                            Description = "Rosa bakverk",
                            FK_MenuId = 4,
                            FK_RestaurantId = 0,
                            Name = "Hallonpaj med grädde",
                            isAvaliable = true
                        },
                        new
                        {
                            Id = 18,
                            AmountAvaliable = 100,
                            Category = "Bakelser",
                            Description = "det är paj",
                            FK_MenuId = 4,
                            FK_RestaurantId = 0,
                            Name = "Blåbärspaj med grädde",
                            isAvaliable = true
                        },
                        new
                        {
                            Id = 19,
                            AmountAvaliable = 100,
                            Category = "Dryck",
                            Description = "Brun dryck",
                            FK_MenuId = 3,
                            FK_RestaurantId = 0,
                            Name = "Kaffe",
                            isAvaliable = true
                        },
                        new
                        {
                            Id = 20,
                            AmountAvaliable = 100,
                            Category = "Dryck",
                            Description = "Halvgenomskinlig dryck",
                            FK_MenuId = 3,
                            FK_RestaurantId = 0,
                            Name = "Té",
                            isAvaliable = true
                        });
                });

            modelBuilder.Entity("RestaurantManager.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FK_RestaurantID")
                        .HasColumnType("int");

                    b.Property<int>("FK_UserId")
                        .HasColumnType("int");

                    b.Property<int?>("RestaurantId")
                        .HasColumnType("int");

                    b.Property<int?>("RestaurantId1")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FK_RestaurantID");

                    b.HasIndex("FK_UserId");

                    b.HasIndex("RestaurantId");

                    b.HasIndex("RestaurantId1");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("RestaurantManager.Models.Restaurant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Restaurants");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Vällingbygatan 1, 16266 Vällingby",
                            Description = "Sveriges bästa pizzeria",
                            Email = "PazziPizza@gmail.com",
                            Name = "Pazzi Pizza",
                            PhoneNumber = "0731111111"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Astrakangatan 1, 16552 Hässelby",
                            Description = "Världens bästa Café",
                            Email = "CafeKaffe@gmail.com",
                            Name = "Café Kaffe",
                            PhoneNumber = "0732222222"
                        });
                });

            modelBuilder.Entity("RestaurantManager.Models.Table", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FK_RestaurantId")
                        .HasColumnType("int");

                    b.Property<int>("NrOfSeats")
                        .HasColumnType("int");

                    b.Property<int?>("RestaurantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.ToTable("Tables");
                });

            modelBuilder.Entity("RestaurantManager.Models.TimeSlot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isAvaliable")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("TimeSlots");
                });

            modelBuilder.Entity("RestaurantManager.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "David@gmail.com",
                            Name = "David Hedman",
                            PhoneNumber = "1111111111"
                        },
                        new
                        {
                            Id = 2,
                            Email = "Leo@gmail.com",
                            Name = "Leo Horrorwitz",
                            PhoneNumber = "1111111122"
                        },
                        new
                        {
                            Id = 3,
                            Email = "Berend@gmail.com",
                            Name = "Berend Mevius",
                            PhoneNumber = "1111111133"
                        },
                        new
                        {
                            Id = 4,
                            Email = "Siri@gmail.com",
                            Name = "Siri Martinsson",
                            PhoneNumber = "1111111144"
                        });
                });

            modelBuilder.Entity("RestaurantManager.Models.Booking", b =>
                {
                    b.HasOne("RestaurantManager.Models.Restaurant", "Restaurant")
                        .WithMany("Bookings")
                        .HasForeignKey("FK_RestaurantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RestaurantManager.Models.Table", "Table")
                        .WithMany()
                        .HasForeignKey("FK_TableId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RestaurantManager.Models.TimeSlot", "Timeslot")
                        .WithMany()
                        .HasForeignKey("FK_TimeslotId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RestaurantManager.Models.User", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("FK_UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Restaurant");

                    b.Navigation("Table");

                    b.Navigation("Timeslot");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RestaurantManager.Models.Menu", b =>
                {
                    b.HasOne("RestaurantManager.Models.Restaurant", "Restaurant")
                        .WithMany("Menus")
                        .HasForeignKey("FK_RestaurantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("RestaurantManager.Models.MenuItem", b =>
                {
                    b.HasOne("RestaurantManager.Models.Menu", "Menu")
                        .WithMany("MenuItems")
                        .HasForeignKey("FK_MenuId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RestaurantManager.Models.Order", null)
                        .WithMany("itemsInOrder")
                        .HasForeignKey("OrderId");

                    b.Navigation("Menu");
                });

            modelBuilder.Entity("RestaurantManager.Models.Order", b =>
                {
                    b.HasOne("RestaurantManager.Models.Restaurant", "Restaurant")
                        .WithMany()
                        .HasForeignKey("FK_RestaurantID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RestaurantManager.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("FK_UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RestaurantManager.Models.Restaurant", null)
                        .WithMany("CurrentOrders")
                        .HasForeignKey("RestaurantId");

                    b.HasOne("RestaurantManager.Models.Restaurant", null)
                        .WithMany("FinnishedOrders")
                        .HasForeignKey("RestaurantId1");

                    b.HasOne("RestaurantManager.Models.User", null)
                        .WithMany("Orders")
                        .HasForeignKey("UserId");

                    b.Navigation("Restaurant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RestaurantManager.Models.Table", b =>
                {
                    b.HasOne("RestaurantManager.Models.Restaurant", null)
                        .WithMany("Tables")
                        .HasForeignKey("RestaurantId");
                });

            modelBuilder.Entity("RestaurantManager.Models.Menu", b =>
                {
                    b.Navigation("MenuItems");
                });

            modelBuilder.Entity("RestaurantManager.Models.Order", b =>
                {
                    b.Navigation("itemsInOrder");
                });

            modelBuilder.Entity("RestaurantManager.Models.Restaurant", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("CurrentOrders");

                    b.Navigation("FinnishedOrders");

                    b.Navigation("Menus");

                    b.Navigation("Tables");
                });

            modelBuilder.Entity("RestaurantManager.Models.User", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
